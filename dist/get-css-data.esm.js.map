{"version":3,"file":"get-css-data.esm.js","sources":["../src/get-urls.js","../src/get-css.js"],"sourcesContent":["/*global XDomainRequest*/\n\n// Functions\n// =============================================================================\n/**\n * Requests one-or-more URLs and returns array of data in order specified.\n * Provides callbacks error and success callbacks for each XMLHttpRequest.\n *\n * @param {array|string} url Single URL or array of URLs to request\n * @param {object}      [options] Options object\n * @param {string}      [options.mimeType] Overrides MIME type returned by\n *                      server\n * @param {function}    [options.onBeforeSend] Callback before each request is\n *                      sent. Passes 1) the xhr object, 2) the URL, and 3) the\n *                      URL index as arguments.\n * @param {function}    [options.onSuccess] Callback on xhr success. Passes 1)\n *                      xhr response text, 2) the URL, and 3) the URL index as\n *                      arguments.\n * @param {function}    [options.onError] Callback on xhr error. Passes 1) the\n *                      xhr object, 2) the URL, 3) the URL index as arguments.\n * @param {function}    [options.onComplete] Callback after all requests have\n *                      completed. Passes 1) an array of response text for each\n *                      URL in order provided as an argument.\n */\nfunction getUrls(urls, options = {}) {\n    const settings = {\n        mimeType    : options.mimeType     || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess   : options.onSuccess    || Function.prototype,\n        onError     : options.onError      || Function.prototype,\n        onComplete  : options.onComplete   || Function.prototype\n    };\n    const urlArray = Array.isArray(urls) ? urls : [urls];\n    const urlQueue = Array.apply(null, Array(urlArray.length)).map(x => null);\n\n    // Functions (Private)\n    // -------------------------------------------------------------------------\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n\n    function onSuccess(responseText, urlIndex) {\n        const returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n\n        responseText = returnVal === false ? '' : returnVal || responseText;\n        urlQueue[urlIndex] = responseText;\n\n        // Complete\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n\n    // Main\n    // -------------------------------------------------------------------------\n    urlArray.forEach((url, i) => {\n        const parser = document.createElement('a');\n\n        parser.setAttribute('href', url);\n        parser.href = String(parser.href);\n\n        const isCrossDomain  = parser.host !== location.host;\n        const isSameProtocol = parser.protocol === location.protocol;\n\n        // IE 9 CORS\n        if (isCrossDomain && typeof XDomainRequest !== 'undefined') {\n            if (isSameProtocol) {\n                const xdr = new XDomainRequest();\n\n                // Event handlers must be assigned AFTER xdr.open\n                xdr.open('GET', url);\n\n                xdr.timeout = 0; // Prevent aborts/timeouts\n                xdr.onprogress = Function.prototype; // Prevent aborts/timeouts\n                xdr.ontimeout = Function.prototype; // Prevent aborts/timeouts\n                xdr.onload = function() {\n                    onSuccess(xdr.responseText, i);\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n\n                // Wrap in setTimeout to fix known issues wtih XDomainRequest\n                // when sending multiple requests\n                setTimeout(function() {\n                    xdr.send();\n                }, 0);\n            }\n            else {\n                // eslint-disable-next-line\n                console.log('Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol');\n                onError(null, i);\n            }\n        }\n        // Other\n        else {\n            const xhr = new XMLHttpRequest();\n\n            xhr.open('GET', url);\n\n            // overrideMimeType method not available in all browsers\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n\n            settings.onBeforeSend(xhr, url, i);\n\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    // Success\n                    if (xhr.status === 200) {\n                        onSuccess(xhr.responseText, i);\n                    }\n                    // Error\n                    else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n\n            xhr.send();\n        }\n    });\n}\n\n\n// Export\n// =============================================================================\nexport default getUrls;\n","// Dependencies\n// =============================================================================\nimport getUrls from './get-urls';\n\n\n// Functions (Public)\n// =============================================================================\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {object}   [options.useCSSOM=false] Determines if CSS data will be\n *                   collected from a stylesheet's runtime values instead of its\n *                   text content. This is required to get accurate CSS data\n *                   when a stylesheet has been modified using the deleteRule()\n *                   or insertRule() methods because these modifications will\n *                   not be reflected in the stylesheet's text content.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     include    : 'style,link[rel=\"stylesheet\"]', // default\n *     exclude    : '[href=\"skip.css\"]',\n *     filter     : /red/,\n *     useCSSOM   : false, // default\n *     rootElement: document, //default\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray, nodeArray) {\n *       // ...\n *     }\n *   });\n */\nfunction getCssData(options) {\n    const regex = {\n        // CSS comments\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        // CSS @import rules ($1: url)\n        cssImports : /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    const settings = {\n        include     : options.include      || 'style,link[rel=\"stylesheet\"]',\n        exclude     : options.exclude      || null,\n        filter      : options.filter       || null,\n        rootElement : options.rootElement  || document,\n        useCSSOM    : options.useCSSOM     || false,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess   : options.onSuccess    || Function.prototype,\n        onError     : options.onError      || Function.prototype,\n        onComplete  : options.onComplete   || Function.prototype\n    };\n    const sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter(node => !matchesSelector(node, settings.exclude));\n    const cssArray    = Array.apply(null, Array(sourceNodes.length)).map(x => null);\n\n    /**\n     * Handles the onComplete() callback after verifying that all CSS has been\n     * processed.\n     */\n    function handleComplete() {\n        const isComplete = cssArray.indexOf(null) === -1;\n\n        if (isComplete) {\n            const cssText = cssArray.join('');\n\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n\n    /**\n     * Processes CSS text, updates cssArray, and triggers handleComplete()\n     * 1. Passes CSS to resolveImports\n     * 2. Triggers onError() callback for each @import error\n     * 3. Tests resolved CSS against (optional) RegEx filter\n     * 4. Triggers onSuccess() callback and accepts modified cssText as return\n     * 5. Inserts final CSS into cssArray\n     * 6. Triggers handleComplete() after processing is complete\n     *\n     * @param {string} cssText CSS text to be processed\n     * @param {number} cssIndex cssArray index to store final CSS\n     * @param {object} node CSS source <link> or <style> node\n     * @param {string} sourceUrl The URL containing the source node\n     */\n    function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n        const returnVal = settings.onSuccess(cssText, node, sourceUrl);\n\n        cssText = returnVal === false ? '' : returnVal || cssText;\n\n        resolveImports(cssText, node, sourceUrl, function(resolvedCssText, errorData) {\n            if (cssArray[cssIndex] === null) {\n                // Trigger onError for each error item\n                errorData.forEach(data => settings.onError(data.xhr, node, data.url));\n\n                // Filter: Pass\n                if (!settings.filter || settings.filter.test(resolvedCssText)) {\n                    cssArray[cssIndex] = resolvedCssText;\n                }\n                // Filter: Fail\n                else {\n                    cssArray[cssIndex] = '';\n                }\n\n                handleComplete();\n            }\n        });\n    }\n\n    /**\n     * Parses CSS and returns an object containing @import related data.\n     *\n     * @param {any} cssText CSS text to be processed\n     * @param {any} baseUrl Base URL used to resolve relative @import URLs\n     * @param {any} [ignoreRules=[]]\n     * @returns {object}\n     */\n    function parseImportData(cssText, baseUrl, ignoreRules = []) {\n        const importData = {};\n\n        // @import rules\n        // Ex: @import \"file.css\";\n        importData.rules = (cssText\n            // Remove comments to avoid processing @import in comments\n            .replace(regex.cssComments, '')\n            // Find all @import rules\n            .match(regex.cssImports)\n            // Force empty array if no match\n            || [])\n            // Remove rules found in ignoreRules array\n            .filter(rule => ignoreRules.indexOf(rule) === -1);\n\n        // @import urls\n        // Ex: file.css\n        importData.urls = importData.rules.map(rule => rule.replace(regex.cssImports, '$1'));\n\n        // Absolute @import urls\n        // Ex: /path/to/file.css\n        importData.absoluteUrls = importData.urls.map(url => getFullUrl(url, baseUrl));\n\n        // Absolute @import rules\n        // Ex: @import \"/path/to/file.css\";\n        importData.absoluteRules = importData.rules.map((rule, i) => {\n            const oldUrl = importData.urls[i];\n            const newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);\n\n            return rule.replace(oldUrl, newUrl);\n        });\n\n        return importData;\n    }\n\n    /**\n     * Recursively parses CSS for @import rules, fetches data for each import\n     * URL, replaces the @rule the fetched data, then returns the resolved CSS\n     * via a callback function.\n     *\n     * @param {string}   cssText CSS text to be processed\n     * @param {object}   node CSS source <link> or <style> node\n     * @param {string}   baseUrl Base URL used to resolve relative @import URLs\n     * @param {function} callbackFn Callback function to trigger on complete.\n     *                   Passes 1) the resolves CSS and 2) an array of error\n     *                   objects as arguments.\n     */\n    function resolveImports(cssText, node, baseUrl, callbackFn, __errorData = [], __errorRules = []) {\n        const importData = parseImportData(cssText, baseUrl, __errorRules);\n\n        // Has @imports\n        if (importData.rules.length) {\n            getUrls(importData.absoluteUrls, {\n                onBeforeSend(xhr, url, urlIndex) {\n                    settings.onBeforeSend(xhr, node, url);\n                },\n                onSuccess(cssText, url, urlIndex) {\n                    const returnVal = settings.onSuccess(cssText, node, url);\n\n                    cssText = returnVal === false ? '' : returnVal || cssText;\n\n                    const responseImportData = parseImportData(cssText, url, __errorRules);\n\n                    // Replace relative @import rules with absolute rules\n                    responseImportData.rules.forEach((rule, i) => {\n                        cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);\n                    });\n\n                    return cssText;\n                },\n                onError(xhr, url, urlIndex) {\n                    __errorData.push({ xhr, url });\n                    __errorRules.push(importData.rules[urlIndex]);\n\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                },\n                onComplete(responseArray) {\n                    responseArray.forEach((importText, i) => {\n                        cssText = cssText.replace(importData.rules[i], importText);\n                    });\n\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                }\n            });\n        }\n        // No @imports\n        else {\n            callbackFn(cssText, __errorData);\n        }\n    }\n\n    // Main\n    // -------------------------------------------------------------------------\n    if (sourceNodes.length) {\n        sourceNodes.forEach((node, i) => {\n            const linkHref = node.getAttribute('href');\n            const linkRel  = node.getAttribute('rel');\n            const isLink   = node.nodeName === 'LINK' && linkHref && linkRel && linkRel.toLowerCase() === 'stylesheet';\n            const isStyle  = node.nodeName === 'STYLE';\n\n            if (isLink) {\n                getUrls(linkHref, {\n                    mimeType: 'text/css',\n                    onBeforeSend(xhr, url, urlIndex) {\n                        settings.onBeforeSend(xhr, node, url);\n                    },\n                    onSuccess(cssText, url, urlIndex) {\n                        // Convert relative linkHref to absolute url\n                        const sourceUrl = getFullUrl(linkHref, location.href);\n\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    },\n                    onError(xhr, url, urlIndex) {\n                        cssArray[i] = '';\n                        settings.onError(xhr, node, url);\n                        handleComplete();\n                    }\n                });\n            }\n            else if (isStyle) {\n                let cssText = node.textContent;\n\n                if (settings.useCSSOM) {\n                    cssText = Array.apply(null, node.sheet.cssRules)\n                        .map(rule => rule.cssText)\n                        .join('');\n                }\n\n                handleSuccess(cssText, i, node, location.href);\n            }\n            else {\n                cssArray[i] = '';\n                handleComplete();\n            }\n        });\n    }\n    else {\n        settings.onComplete('', []);\n    }\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Returns fully qualified URL from relative URL and (optional) base URL\n *\n * @param {any} url\n * @param {any} [base=location.href]\n * @returns\n */\nfunction getFullUrl(url, base = location.href) {\n    const d = document.implementation.createHTMLDocument('');\n    const b = d.createElement('base');\n    const a = d.createElement('a');\n\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n\n    return a.href;\n}\n\n/**\n * Ponyfill for native Element.matches method\n *\n * @param   {object} elm The element to test\n * @param   {string} selector The CSS selector to test against\n * @returns {boolean}\n */\nfunction matchesSelector(elm, selector) {\n    /* istanbul ignore next */\n    const matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n\n    return matches.call(elm, selector);\n}\n\n\n// Export\n// =============================================================================\nexport default getCssData;\n"],"names":["getUrls","urls","options","settings","mimeType","onBeforeSend","Function","prototype","onSuccess","onError","onComplete","urlArray","Array","isArray","urlQueue","apply","length","map","xhr","urlIndex","responseText","returnVal","indexOf","forEach","url","i","parser","document","createElement","setAttribute","href","String","isCrossDomain","host","location","isSameProtocol","protocol","XDomainRequest","xdr","open","timeout","onprogress","ontimeout","onload","onerror","err","send","log","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getCssData","regex","include","exclude","filter","rootElement","useCSSOM","sourceNodes","querySelectorAll","matchesSelector","node","cssArray","handleComplete","isComplete","cssText","join","handleSuccess","cssIndex","sourceUrl","resolvedCssText","errorData","data","test","parseImportData","baseUrl","ignoreRules","importData","rules","replace","cssComments","match","cssImports","rule","absoluteUrls","getFullUrl","absoluteRules","oldUrl","newUrl","resolveImports","callbackFn","__errorData","__errorRules","responseImportData","push","responseArray","importText","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isStyle","textContent","sheet","cssRules","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","elm","selector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call"],"mappings":"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"}