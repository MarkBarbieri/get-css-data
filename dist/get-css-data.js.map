{"version":3,"file":"get-css-data.js","sources":["../src/get-urls.js","../src/get-css.js"],"sourcesContent":["// Functions\n// =============================================================================\n/**\n * Requests one-or-more URLs and returns array of data in order specified.\n * Provides callbacks error and success callbacks for each XMLHttpRequest.\n *\n * @param {array|string} url - Single URL or array of URLs to request\n * @param {object} [options] - Options object\n * @param {string} [options.mimeType] - Overrides MIME type returned by server\n * @param {function} [options.onComplete] - Callback after all xhr requests have\n * completed. Returns array of response text for each URL in order provided.\n * @param {function} [options.onError] - Callback on xhr error. Returns xhr\n * object, URL, and URL index.\n * @param {function} [options.onSuccess] - Callback on xhr success. Returns\n * xhr.responseText, URL, and URL index.\n */\nfunction getUrls(urls, options = {}) {\n    const settings = {\n        mimeType  : options.mimeType   || null,\n        onComplete: options.onComplete || Function.prototype,\n        onError   : options.onError    || Function.prototype,\n        onSuccess : options.onSuccess  || Function.prototype\n    };\n    const urlArray = Array.isArray(urls) ? urls : [urls];\n    const urlQueue = Array.apply(null, Array(urlArray.length)).map(x => null);\n\n    // Functions (Private)\n    // -------------------------------------------------------------------------\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n\n    function onSuccess(responseText, urlIndex) {\n        urlQueue[urlIndex] = responseText;\n        settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n\n        // Complete\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n\n    // Main\n    // -------------------------------------------------------------------------\n    urlArray.forEach((url, i) => {\n        const parser = document.createElement('a');\n\n        parser.setAttribute('href', url);\n        parser.href = parser.href;\n\n        const isCrossDomain  = parser.host !== location.host;\n        const isSameProtocol = parser.protocol === location.protocol;\n\n        // IE 9 CORS\n        if (isCrossDomain && typeof XDomainRequest !== 'undefined') {\n            if (isSameProtocol) {\n                const xdr = new XDomainRequest();\n\n                // Event handlers must be assigned AFTER xdr.open\n                xdr.open('GET', url);\n\n                xdr.timeout = 0; // Prevent aborts/timeouts\n                xdr.onprogress = Function.prototype; // Prevent aborts/timeouts\n                xdr.ontimeout = Function.prototype; // Prevent aborts/timeouts\n                xdr.onload = function() {\n                    onSuccess(xdr.responseText, i);\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n\n                // Wrap in setTimeout to fix known issues wtih XDomainRequest\n                // when sending multiple requests\n                setTimeout(function() {\n                    xdr.send();\n                }, 0);\n            }\n            else {\n                // eslint-disable-next-line\n                console.log('Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol');\n                onError(null, i);\n            }\n        }\n        // Other\n        else {\n            const xhr = new XMLHttpRequest();\n\n            xhr.open('GET', url);\n\n            // overrideMimeType method not available in all browsers\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    // Success\n                    if (xhr.status === 200) {\n                        onSuccess(xhr.responseText, i);\n                    }\n                    // Error\n                    else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n\n            xhr.send();\n        }\n    });\n}\n\n\n// Export\n// =============================================================================\nexport default getUrls;\n","// Dependencies\n// =============================================================================\nimport getUrls from './get-urls';\n\n\n// Functions (Public)\n// =============================================================================\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object} [options={}] - The options object\n * @param {string} options.include - CSS selector matching <link> and <style>\n * nodes to include\n * @param {string} options.exclude - CSS selector matching <link> and <style>\n * nodes to exclude\n * @param {object} options.filter - Regular expression used to filter node CSS\n * data. Each block of CSS data is tested against the filter, and only matching\n * data is included.\n * @param {function} options.onComplete - Callback after all nodes have been\n * processed. Passes concatenated CSS text and array of CSS text in DOM order as\n * arguments.\n * @param {function} options.onError - Callback on each error. Passes the XHR\n * object for inspection, soure node reference, and the source URL that failed\n * (either a <link> href or an @import) as arguments\n * @param {function} options.onSuccess - Callback on each CSS node read. Passes\n * CSS text, source node reference, and the source URL (either a <link> href or\n * an import) as arguments.\n * @example\n *\n *   getCssData({\n *     include: 'style,link[rel=\"stylesheet\"]', // default\n *     exclude: '[href=\"skip.css\"]',\n *     filter : /red/,\n *     onComplete(cssText, cssArray) {\n *       // ...\n *     },\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *   });\n */\nfunction getCssData(options) {\n    const regex = {\n        // CSS comments\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        // CSS @import rules ($1: url)\n        cssImports : /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    const settings = {\n        include   : options.include    || 'style,link[rel=\"stylesheet\"]',\n        exclude   : options.exclude    || null,\n        filter    : options.filter     || null,\n        onComplete: options.onComplete || Function.prototype,\n        onError   : options.onError    || Function.prototype,\n        onSuccess : options.onSuccess  || Function.prototype\n    };\n    const sourceNodes = Array.apply(null, document.querySelectorAll(settings.include)).filter(node => !matchesSelector(node, settings.exclude));\n    const cssQueue    = Array.apply(null, Array(sourceNodes.length)).map(x => null);\n\n    /**\n     * Handles the onComplete() callback after verifying that all CSS has been\n     * processed.\n     */\n    function handleComplete() {\n        const isComplete = cssQueue.indexOf(null) === -1;\n\n        if (isComplete) {\n            const cssText = cssQueue.join('');\n\n            settings.onComplete(cssText, cssQueue);\n        }\n    }\n\n    /**\n     * Handles the onError callback for failed XMLHttpRequests\n     *\n     * @param {object} xhr\n     * @param {string} url\n     * @param {number} cssIndex\n     * @param {object} node\n     */\n    function handleError(xhr, url, cssIndex, node) {\n        cssQueue[cssIndex] = '';\n\n        settings.onError(xhr, node, url);\n\n        handleComplete();\n    }\n\n    /**\n     * Processes CSS text, updates cssQueue, and triggers handleComplete()\n     * 1. Tests CSS against (optional) RegEx filter\n     * 2. Triggers onSuccess() callback and accepts modified cssText as return\n     * 3. Detects and resolves @import rules\n     * 4. Inserts final CSS into cssQueue\n     * 5. Triggers handleComplete() after processing is complete\n     *\n     * @param {string} cssText - CSS text to be processed\n     * @param {number} cssIndex - cssQueue index to store final CSS\n     * @param {object} node - CSS source <link> or <style> node\n     * @param {string} sourceUrl - The base URL for resolving relative @imports\n     * @param {string} importUrl - The @import source URL (if applicable)\n     */\n    function handleSuccess(cssText, cssIndex, node, sourceUrl, importUrl) {\n        // Filter: Pass\n        if (!settings.filter || settings.filter.test(cssText)) {\n            // Store the return value of the onSuccess callback. This allows\n            // modifying cssText before adding to cssQueue.\n            const returnVal = settings.onSuccess(cssText, node, importUrl || sourceUrl);\n\n            // Set cssText to return value (if provided)\n            cssText = returnVal === false ? '' : returnVal || cssText;\n\n            // Get @import rules from cssText. CSS comments are removed\n            // to avoid @import statements in comments from being processed.\n            const importRules = cssText.replace(regex.cssComments, '').match(regex.cssImports);\n\n            // Has @imports\n            if (importRules) {\n                let importUrls = importRules.map(decl => decl.replace(regex.cssImports, '$1'));\n\n                // Convert relative importUrls to absolute urls using\n                // sourceUrl as base.\n                importUrls = importUrls.map(url => getFullUrl(url, sourceUrl));\n\n                getUrls(importUrls, {\n                    onError(xhr, url, urlIndex) {\n                        handleError(xhr, url, cssIndex, node);\n                    },\n                    onSuccess(importText, url, urlIndex) {\n                        const importDecl = importRules[urlIndex];\n                        const importUrl  = importUrls[urlIndex];\n                        const newCssText = cssText.replace(importDecl, importText);\n\n                        handleSuccess(newCssText, cssIndex, node, url, importUrl);\n                    }\n                });\n            }\n            // No @imports\n            else {\n                cssQueue[cssIndex] = cssText;\n                handleComplete();\n            }\n        }\n        // Filter: Fail\n        else {\n            cssQueue[cssIndex] = '';\n            handleComplete();\n        }\n    }\n\n    // Main\n    // -------------------------------------------------------------------------\n    if (sourceNodes.length) {\n        sourceNodes.forEach((node, i) => {\n            const linkHref = node.getAttribute('href');\n            const linkRel  = node.getAttribute('rel');\n            const isLink   = node.nodeName === 'LINK' && linkHref && linkRel && linkRel.toLowerCase() === 'stylesheet';\n            const isStyle  = node.nodeName === 'STYLE';\n\n            if (isLink) {\n                getUrls(linkHref, {\n                    mimeType: 'text/css',\n                    onError(xhr, url, urlIndex) {\n                        handleError(xhr, url, i, node);\n                    },\n                    onSuccess(cssText, url, urlIndex) {\n                        // Convert relative linkHref to absolute url to use as\n                        // the base URL for @import statements.\n                        // const sourceUrl = new URLParse(linkHref, location.href).href;\n                        const sourceUrl = getFullUrl(linkHref, location.href);\n\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    }\n                });\n            }\n            else if (isStyle) {\n                handleSuccess(node.textContent, i, node, location.href);\n            }\n            else {\n                cssQueue[i] = '';\n                handleComplete();\n            }\n        });\n    }\n    else {\n        settings.onComplete('', []);\n    }\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Returns fully qualified URL from relative URL and (optional) base URL\n *\n * @param {any} url\n * @param {any} [base=location.href]\n * @returns\n */\nfunction getFullUrl(url, base = location.href) {\n    const d = document.implementation.createHTMLDocument('');\n    const b = d.createElement('base');\n    const a = d.createElement('a');\n\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n\n    return a.href;\n}\n\n/**\n * Ponyfill for native Element.matches method\n *\n * @param {object} elm - The element to test\n * @param {string} selector - The CSS selector to test against\n * @returns {boolean}\n */\nfunction matchesSelector(elm, selector) {\n    /* istanbul ignore next */\n    const matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n\n    return matches.call(elm, selector);\n}\n\n\n// Export\n// =============================================================================\nexport default getCssData;\n"],"names":["getUrls","urls","options","settings","mimeType","onComplete","Function","prototype","onError","onSuccess","urlArray","Array","isArray","urlQueue","apply","length","map","xhr","urlIndex","responseText","indexOf","forEach","url","i","parser","document","createElement","setAttribute","href","isCrossDomain","host","location","isSameProtocol","protocol","XDomainRequest","xdr","open","timeout","onprogress","ontimeout","onload","onerror","err","send","log","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getCssData","regex","include","exclude","filter","sourceNodes","querySelectorAll","matchesSelector","node","cssQueue","handleComplete","isComplete","cssText","join","handleError","cssIndex","handleSuccess","sourceUrl","importUrl","test","returnVal","importRules","replace","cssComments","match","cssImports","importUrls","decl","getFullUrl","importText","importDecl","newCssText","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isStyle","textContent","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","elm","selector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call"],"mappings":"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"}